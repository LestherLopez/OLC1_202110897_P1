
package analizador;
import java_cup.runtime.*;


import java.util.ArrayList;

import java_cup.runtime.XMLElement;
import proyecto1_olc1.NodoArbol;
import proyecto1_olc1.Tree;

 
parser code 
{:
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    
    public ArrayList<Tree> leaves = new ArrayList<>();
    public ArrayList<ArrayList> table = new ArrayList<>();

    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
:} 

terminal String ENTERO, CONJ, MAYUSCULAS, MINUSCULAS, SIGNOS_ASCII, PUNTO_Y_COMA, PORCENTAJE, LLAVE_ABRIR, LLAVE_CERRAR, DOS_PUNTOS, MAYOR, GUION, COMA, VIRGUILILLA, PUNTO, SUMA, 
DISYUNCION, INTERROGACION, KLEENE, NOMBRE_VARIABLE,  TEXT,  CONJUNTO_ABC, CARACTER_ESPECIAL, COMILLA;




non terminal ini, primer_bloque, segundo_bloque, sentencia, er, conjuntos_con_comas, sentencias_segundobloque, notacion_conjunto, elemento;



start with ini; 


ini ::= LLAVE_ABRIR primer_bloque PORCENTAJE PORCENTAJE PORCENTAJE PORCENTAJE segundo_bloque LLAVE_CERRAR
; 
primer_bloque ::= primer_bloque sentencia 
                  | sentencia
                  ;


sentencia ::= CONJ DOS_PUNTOS NOMBRE_VARIABLE GUION MAYOR notacion_conjunto PUNTO_Y_COMA
                | NOMBRE_VARIABLE GUION MAYOR  er:a PUNTO_Y_COMA{:leaves.add(new Tree((NodoArbol) a));
                
                /*
                NodoArbol stm = (NodoArbol)(Object)a;
                Tree nueva_raiz = new Tree(stm);
                leaves.add(stm);
                */
               // leaves.add(new Tree((NodoArbol) a))
                    
:}
                ;
notacion_conjunto ::= MINUSCULAS VIRGUILILLA MINUSCULAS
                | MAYUSCULAS VIRGUILILLA MAYUSCULAS
                | SIGNOS_ASCII VIRGUILILLA SIGNOS_ASCII
                | ENTERO VIRGUILILLA ENTERO
                | CONJUNTO_ABC VIRGUILILLA CONJUNTO_ABC
                | conjuntos_con_comas
                ;

conjuntos_con_comas ::= conjuntos_con_comas COMA elemento
                        | elemento
                        ;
elemento ::= MINUSCULAS
            | MAYUSCULAS
            | ENTERO
           | CONJUNTO_ABC
            | SIGNOS_ASCII
            ;
//node lefto = (node)(Object)str;
//node no = new node(character, Tipos.OR, 0, lefto, righto, leaves, table);
er ::= PUNTO:character er:di er:dd      {:  
                        NodoArbol nconjuncion = new NodoArbol(character);    
                        NodoArbol leftp = (NodoArbol)(Object)di;
                        NodoArbol rightp = (NodoArbol)(Object)dd;
                        nconjuncion.setIzquierdo(leftp);
                        nconjuncion.setDerecho(rightp);
                        RESULT = nconjuncion;
                                :}
       | DISYUNCION:character er:di er:dd  {:  
                        NodoArbol ndisyuncion = new NodoArbol(character);    
                        NodoArbol lefto = (NodoArbol)(Object)di;
                        NodoArbol righto = (NodoArbol)(Object)dd;
                        ndisyuncion.setIzquierdo(lefto);
                        ndisyuncion.setDerecho(righto);
                        RESULT = ndisyuncion;
                    :}
       | KLEENE:character er:k      {:  
                        NodoArbol nk = new NodoArbol(character);
              
                        NodoArbol unariok = (NodoArbol)(Object)k;
                        nk.setIzquierdo(unariok);
                      
                        RESULT = nk;
                    :}
       | SUMA:character er:p    {:  

                        NodoArbol np = new NodoArbol(character);
              
                        NodoArbol unariop = (NodoArbol)(Object)p;
                        np.setIzquierdo(unariop);
                      
                        RESULT = np;
                    :}
                        
       | INTERROGACION:character  er:a  {:  
                                NodoArbol nb = new NodoArbol(character);
                                
                                NodoArbol unariob = (NodoArbol)(Object)a;
                                nb.setIzquierdo(unariob);
                               RESULT = nb;
                    :}
       | CARACTER_ESPECIAL:character {:                               NodoArbol nz = new NodoArbol(character);
                                                                      nz.setHojas(true);
                                                                      nz.setAnulabilidad(false);
                                                                      RESULT = nz;
                                     :}
       | LLAVE_ABRIR:a NOMBRE_VARIABLE:character LLAVE_CERRAR:c   {:  NodoArbol nd = new NodoArbol(character);
                                                                      nd.setHojas(true);
                                                                      nd.setAnulabilidad(false);
                                                                      RESULT = nd;
                                                                   :}
       ;


segundo_bloque ::= segundo_bloque sentencias_segundobloque
                   | sentencias_segundobloque
                   ;
sentencias_segundobloque ::= NOMBRE_VARIABLE DOS_PUNTOS TEXT PUNTO_Y_COMA
                            ;